// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$blockquote-name: 'blockquote';
$blockquote-x: 0px;
$blockquote-y: 0px;
$blockquote-offset-x: 0px;
$blockquote-offset-y: 0px;
$blockquote-width: 30px;
$blockquote-height: 25px;
$blockquote-total-width: 82px;
$blockquote-total-height: 51px;
$blockquote-image: '../images/sprite.png';
$blockquote: (0px, 0px, 0px, 0px, 30px, 25px, 82px, 51px, '../images/sprite.png', 'blockquote', );
$danger-name: 'danger';
$danger-x: 35px;
$danger-y: 0px;
$danger-offset-x: -35px;
$danger-offset-y: 0px;
$danger-width: 21px;
$danger-height: 21px;
$danger-total-width: 82px;
$danger-total-height: 51px;
$danger-image: '../images/sprite.png';
$danger: (35px, 0px, -35px, 0px, 21px, 21px, 82px, 51px, '../images/sprite.png', 'danger', );
$question-name: 'question';
$question-x: 0px;
$question-y: 30px;
$question-offset-x: 0px;
$question-offset-y: -30px;
$question-width: 21px;
$question-height: 21px;
$question-total-width: 82px;
$question-total-height: 51px;
$question-image: '../images/sprite.png';
$question: (0px, 30px, 0px, -30px, 21px, 21px, 82px, 51px, '../images/sprite.png', 'question', );
$success-name: 'success';
$success-x: 26px;
$success-y: 30px;
$success-offset-x: -26px;
$success-offset-y: -30px;
$success-width: 21px;
$success-height: 21px;
$success-total-width: 82px;
$success-total-height: 51px;
$success-image: '../images/sprite.png';
$success: (26px, 30px, -26px, -30px, 21px, 21px, 82px, 51px, '../images/sprite.png', 'success', );
$warning-name: 'warning';
$warning-x: 61px;
$warning-y: 0px;
$warning-offset-x: -61px;
$warning-offset-y: 0px;
$warning-width: 21px;
$warning-height: 21px;
$warning-total-width: 82px;
$warning-total-height: 51px;
$warning-image: '../images/sprite.png';
$warning: (61px, 0px, -61px, 0px, 21px, 21px, 82px, 51px, '../images/sprite.png', 'warning', );
$spritesheet-width: 82px;
$spritesheet-height: 51px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($blockquote, $danger, $question, $success, $warning, );
$spritesheet: (82px, 51px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
